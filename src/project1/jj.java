/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project1;

import com.sun.xml.internal.ws.api.message.Message;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class jj extends javax.swing.JFrame {

    /**
     * Creates new form jj
     */
    public jj() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        ra = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rc = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        bb = new javax.swing.JButton();
        ba = new javax.swing.JButton();
        bc = new javax.swing.JButton();
        rd = new javax.swing.JButton();
        rb = new javax.swing.JButton();
        bd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        ra.setBackground(new java.awt.Color(255, 0, 0));
        ra.setToolTipText("a");
        ra.setName(""); // NOI18N
        ra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raActionPerformed(evt);
            }
        });
        getContentPane().add(ra);
        ra.setBounds(870, 270, 20, 20);

        jButton1.setText("jButton1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(30, 660, 73, 23);

        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(200, 610, 230, 20);

        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(850, 160, 34, 14);

        jLabel4.setText("jLabel4");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(850, 180, 34, 14);

        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(850, 200, 50, 14);

        rc.setBackground(new java.awt.Color(255, 0, 0));
        rc.setToolTipText("c");
        rc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rcActionPerformed(evt);
            }
        });
        getContentPane().add(rc);
        rc.setBounds(870, 330, 20, 20);

        jLabel6.setText("jLabel6");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(850, 220, 34, 14);

        bb.setBackground(new java.awt.Color(0, 0, 255));
        bb.setToolTipText("b");
        bb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bbActionPerformed(evt);
            }
        });
        getContentPane().add(bb);
        bb.setBounds(840, 300, 20, 20);

        ba.setBackground(new java.awt.Color(0, 0, 255));
        ba.setToolTipText("a");
        ba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baActionPerformed(evt);
            }
        });
        getContentPane().add(ba);
        ba.setBounds(840, 270, 20, 20);

        bc.setBackground(new java.awt.Color(0, 0, 255));
        bc.setToolTipText("c");
        bc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcActionPerformed(evt);
            }
        });
        getContentPane().add(bc);
        bc.setBounds(840, 330, 20, 20);

        rd.setBackground(new java.awt.Color(255, 0, 0));
        rd.setToolTipText("d");
        rd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdActionPerformed(evt);
            }
        });
        getContentPane().add(rd);
        rd.setBounds(870, 360, 20, 20);

        rb.setBackground(new java.awt.Color(255, 0, 0));
        rb.setToolTipText("b");
        rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbActionPerformed(evt);
            }
        });
        getContentPane().add(rb);
        rb.setBounds(870, 300, 20, 20);

        bd.setBackground(new java.awt.Color(0, 0, 255));
        bd.setToolTipText("d");
        bd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdActionPerformed(evt);
            }
        });
        getContentPane().add(bd);
        bd.setBounds(840, 360, 20, 20);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Picture1.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 0, 810, 610);

        jLabel7.setText("jLabel7");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(200, 630, 200, 14);

        jLabel8.setText("jLabel8");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(200, 650, 230, 14);

        jLabel9.setText("jLabel9");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(200, 670, 250, 14);

        jLabel10.setText("jLabel10");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(460, 610, 190, 14);

        jLabel11.setText("jLabel11");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(460, 630, 190, 14);

        jLabel12.setText("jLabel12");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(460, 650, 200, 14);

        jLabel13.setText("jLabel13");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(460, 670, 200, 14);

        jLabel14.setText("jLabel14");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(820, 440, 90, 14);

        jLabel15.setText("jLabel15");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(820, 20, 90, 14);

        jLabel16.setText("jLabel16");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(820, 40, 90, 14);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*jButton1.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
    Point p1=jButton2.getLocation();
          int x1 = p1.x;
         int y1 = p1.y;
         
         jButton2.setLocation(x1, y1-5);
        
       
     
         
//To change body of generated methods, choose Tools | Templates.
    }
}); */
        Point ab = ra.getLocation();
        String bc = String.valueOf(ab);
        jLabel2.setText(bc);

        Point ac = rc.getLocation();
        String ba = String.valueOf(ac);
        jLabel7.setText(ba);

        Point ad = bb.getLocation();
        String bb = String.valueOf(ad);
        jLabel8.setText(bb);

        Point ae = this.bc.getLocation();
        String bd = String.valueOf(ae);
        jLabel9.setText(bd);

        Point af = rd.getLocation();
        String be = String.valueOf(af);
        jLabel10.setText(be);

        Point ag = rb.getLocation();
        String bf = String.valueOf(ag);
        jLabel11.setText(bf);

        Point ah = this.bd.getLocation();
        String bg = String.valueOf(ah);
        jLabel12.setText(bg);

        Point ai = this.ba.getLocation();
        String bh = String.valueOf(ai);
        jLabel13.setText(bh);

        Random q = new Random();
        Random r = new Random();
        Random m = new Random();
        Random t = new Random();
        int maximum = 2;
        s = 0;
        int a = q.nextInt(maximum) + 1;
        int b = r.nextInt(maximum) + 1;
        int c = m.nextInt(maximum) + 1;
        int g = t.nextInt(maximum) + 1;

        String d = String.valueOf(a);
        String e = String.valueOf(b);
        String f = String.valueOf(c);
        String h = String.valueOf(g);

        jLabel3.setText(d);
        jLabel4.setText(e);
        jLabel5.setText(f);
        jLabel6.setText(h);

        //jLabel7.setText(String.valueOf(s));
        {
            if (a == 1 && b == 1 && c == 1 && g == 1) {
                s = 8;

            } else if (a == 2 && b == 2 && c == 2 && g == 2) {
                s = 4;
            } else if ((a == 2 && b == 2 && c == 2 && g == 1) || (a == 2 && b == 2 && c == 1 && g == 2) || (a == 2 && b == 1 && c == 2 && g == 2) || (a == 1 && b == 2 && c == 2 && g == 2)) {
                s = 3;

            } else if ((a == 2 && b == 2 && c == 1 && g == 1) || (a == 2 && b == 1 && c == 1 && g == 2) || (a == 1 && b == 1 && c == 2 && g == 2) || (a == 1 && b == 2 && c == 1 && g == 2) || (a == 2 && b == 1 && c == 2 && g == 1) || (a == 1 && b == 2 && c == 2 && g == 1)) {
                s = 2;
            } else if ((a == 2 && b == 1 && c == 1 && g == 1) || (a == 1 && b == 1 && c == 1 && g == 2) || (a == 1 && b == 1 && c == 2 && g == 1) || (a == 1 && b == 2 && c == 1 && g == 1)) {
                s = 1;
            }
        }
        jLabel14.setText(String.valueOf(s));
        level();
        switchplayer();

//        if (playerchance > 0) {
//            player = player;
//        }
//        JOptionPane.showMessageDialog(null, "player=" + player);
//        chance(s);
//        switchplayer();

        /*if(s==8) 
 {
     jButton2.move(220,400);
 }
if(s==1)
   {
   jButton2.move(295,400);
    }
 else  if(s==2)
{
    jButton2.move(400,400);
}
  else if(s==3)
{
   jButton2.move(390, 305);
}    

else if(s==4)
{
    jButton2.move(390, 230);
    }    
 
 

         */
        // TODO add your handling code here:
        /*int player=0;
        if(player==0)
        {
            player=1;
          
            bmove(this.ba,ftba[0],ftba[1]);
            bmove(this.bb, ftbb[0], ftbb[1]);
            bmove(this.bc, ftbc[0], ftbc[1]);
            bmove(this.bd, ftbd[0], ftbd[1]);
        }else if(player==1)
        {
            player=2;
           rmove(this.ra, ftra[0] , ftra[1]) ;
           
        }else if(player==2)
        {
           player=1;
              bmove(this.ba,ftba[0],ftba[1]);
        }*/

    }//GEN-LAST:event_jButton1ActionPerformed

    public void level() {
        switch (s) {
            case 1:
                if (boutcount > 0) {
                    insert = 1;
                } else if(boutcount==0){
                    move = 1;
                }
                break;
            case 2:
                insert = 0;
                if (boutcount < 4) {
                    move = 1;
                }
                break;
                default:
                    break;
        }
    }

    public void switchplayer() {
        msg("Switch Player Called");
        if (playerchance == 0) {
            msg("Player CHance = 0");
            if (player == 1 || player == 0) {
                player = 2;
                msg("player=2");
            } else if (player == 2) {
                player = 1;
                msg("player=1");
            }
        }
    }

    public void coinInsert(JButton b, int x, int y) {
        if (b == ba && bas == 0) {
            b.move(x, y);
            bas = 1;
            bapos++;
            boutcount--;
        }

        if (b == bb && bbs == 0) {
            b.move(x, y);
            bbs = 1;
            bbpos++;
            boutcount--;
        }

        if (b == bc && bcs == 0) {
            b.move(x, y);
            bcs = 1;
            bcpos++;
            boutcount--;
        }

        if (b == bd && bds == 0) {
            b.move(x, y);
            bds = 1;
            bdpos++;
            boutcount--;
        }
    }

    public void coinMove(JButton b, int x, int y) {
        int i = 0;
        while (i <= s - 1) {
            int X = b.getLocation().x;
            int Y = b.getLocation().y;
            i++;
            if (b == ba) {
                b.move(X + icell[bac][0], Y + icell[bac][1]);
                bac++;
                bapos++;
            }
            if (b == bb) {
                b.move(X + icell[bbc][0], Y + icell[bbc][1]);
                bbc++;
                bbpos++;
            }
            if (b == bc) {
                b.move(X + icell[bcc][0], Y + icell[bcc][1]);
                bcc++;
                bcpos++;
            }
            if (b == bd) {
                b.move(X + icell[bdc][0], Y + icell[bdc][1]);
                bdc++;
                bdpos++;
            }
        }
    }

    private void raActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raActionPerformed

        //rmove(ra, ftra[0], ftra[1]); // TODO add your handling code here:
    }//GEN-LAST:event_raActionPerformed

    private void baActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baActionPerformed
        // TODO add your handling code here:

        //bmove(ba, ftba[0], ftba[1]);
        if (insert == 1) {
            coinInsert(ba, ftba[0], ftba[1]);
            insert = 0;
        }
        if (move == 1) {
            coinMove(ba, ftba[0], ftba[1]);
            move = 0;
        }

    }//GEN-LAST:event_baActionPerformed

    private void bdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdActionPerformed
        // TODO add your handling code here:
        //bmove(bd, ftbd[0], ftbd[1]);
        if (insert == 1) {
            coinInsert(bd, ftbd[0], ftbd[1]);
            insert = 0;
        }
        if (move == 1) {
            coinMove(bd, ftbd[0], ftbd[1]);
            move = 0;
        }


    }//GEN-LAST:event_bdActionPerformed

    private void rdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdActionPerformed
        //rmove(rd, ftrd[0], ftrd[1]);

        // TODO add your handling code here:
    }//GEN-LAST:event_rdActionPerformed

    private void bbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bbActionPerformed
        // TODO add your handling code here:
        //bmove(bb, ftbb[0], ftbb[1]);

        if (insert == 1) {
            coinInsert(bb, ftbb[0], ftbb[1]);
            insert = 0;
        }
        if (move == 1) {
            coinMove(bb, ftbb[0], ftbb[1]);
            move = 0;
        }


    }//GEN-LAST:event_bbActionPerformed

    private void bcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcActionPerformed
        // TODO add your handling code here:
        //bmove(bc, ftbc[0], ftbc[1]);

        if (insert == 1) {
            coinInsert(bc, ftbc[0], ftbc[1]);
            insert = 0;
        }
        if (move == 1) {
            coinMove(bc, ftbc[0], ftbc[1]);
            move = 0;
        }

    }//GEN-LAST:event_bcActionPerformed

    private void rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbActionPerformed
        //rmove(rb, ftrb[0], ftrb[1]); // TODO add your handling code here:
    }//GEN-LAST:event_rbActionPerformed

    private void rcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rcActionPerformed
        //rmove(rc, ftrc[0], ftrc[1]);  // TODO add your handling code here:
    }//GEN-LAST:event_rcActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jj().setVisible(true);
            }
        });
    }

//    public void chance(int S) {
//        if (player == 1 || player == 0) {
//            switch (S) {
//                case 1:
//                    movechance = 1;
//                    insertchance = 1;
//                    playerchance = 1;
//
//                    break;
//                case 2:
//
//                    insertchance = 0;
//                    if (boutcount == 4) {
//                        playerchance = 0;
//                        movechance = 0;
//                    } else {
//                        playerchance = 1;
//                        movechance = 1;
//                    }
//
//                    break;
//                case 3:
//
//                    insertchance = 0;
//                    if (boutcount == 4) {
//                        playerchance = 0;
//                        movechance = 0;
//                    } else {
//                        playerchance = 1;
//                        movechance = 1;
//                    }
//
//                    break;
//                case 4:
//                    movechance = 1;
//                    if (boutcount == 4) {
//                        movechance = 0;
//
//                    }
//                    insertchance = 1;
//                    playerchance = 1;
//                    break;
//                case 8:
//                    if (boutcount == 1) {
//                        movechance = 2;
//                        insertchance = 1;
//                        s = 4;
//                        playerchance = 2;
//                    } else if (boutcount > 1) {
//                        movechance = 1;
//                        insertchance = 2;
//                        playerchance = 2;
//                    } else if (boutcount == 0) {
//                        movechance = 1;
//                        insertchance = 0;
//                        playerchance = 2;
//                    }
//                    break;
//                default:
//                    movechance = 0;
//                    insertchance = 0;
//                    playerchance = 0;
//                    break;
//
//            }
//
//        } else if (player == 2) {
//            switch (S) {
//                case 1:
//                    movechance = 1;
//                    insertchance = 1;
//                    playerchance = 1;
//                    break;
//                case 2:
//
//                    insertchance = 0;
//                    if (routcount == 4) {
//                        playerchance = 0;
//                        movechance = 0;
//                    } else {
//                        playerchance = 1;
//                        movechance = 1;
//                    }
//
//                    break;
//                case 3:
//
//                    insertchance = 0;
//                    if (routcount == 4) {
//                        playerchance = 0;
//                        movechance = 0;
//                    } else {
//                        playerchance = 1;
//                        movechance = 1;
//                    }
//
//                    break;
//                case 4:
//                    movechance = 1;
//                    insertchance = 1;
//                    playerchance = 1;
//                    break;
//                case 8:
//                    if (routcount == 1) {
//                        movechance = 2;
//                        insertchance = 1;
//                        s = 4;
//                        playerchance = 2;
//                    } else if (routcount > 1) {
//                        movechance = 1;
//                        insertchance = 2;
//                        playerchance = 2;
//                    } else if (routcount == 0) {
//                        movechance = 1;
//                        insertchance = 0;
//                        playerchance = 2;
//                    }
//                    break;
//                default:
//                    movechance = 0;
//                    insertchance = 0;
//                    playerchance = 0;
//
//                    break;
//
//            }
//        }
//
//        jLabel16.setText("Chance = " + String.valueOf(playerchance));
//
//    }
//    public void bmove(JButton coin, int x, int y) {
//        if (player == 1 || player == 0) {
//
//            if (boutcount > 0) {
//                if (insertchance > 0) {
//                    insert(coin, x, y);
//                    movechance--;
//                    insertchance--;
//                    playerchance--;
//
//                }
//            } 
//            if (movechance > 0) {
//                if (bas == 1 && coin == ba) {
//                    if (25 - bapos >= s) {
//                        move(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//
//                    }
//                } else if (bbs == 1 && coin == bb) {
//                    if (25 - bbpos >= s) {
//                        move(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//
//                    }
//                } else if (bcs == 1 && coin == bc) {
//                    if (25 - bcpos >= s) {
//                        move(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//
//                    }
//                } else if (bds == 1 && coin == bd) {
//                    if (25 - bdpos >= s) {
//                        move(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//
//                    }
//                }
//            }
//
//        }
//
//    }
//    public void insert(JButton coin, int x, int y) {
//
//        if (coin == ba && bas == 0) {
//            coin.move(x, y);
//            //s=0;
//            bas = 1;
//            bapos++;
//            boutcount--;
//
//            //
//        } else if (coin == ba && bas == 1) {
//
//        }
//
//        if (coin == bb && bbs == 0) {
//            coin.move(x, y);
//            //s=0;
//            bbs = 1;
//            bbpos++;
//            boutcount--;
//            //
//
//        } else if (coin == bb && bbs == 1) {
//
//        }
//
//        if (coin == bc && bcs == 0) {
//            coin.move(x, y);
//            //s=0;
//            bcs = 1;
//            bcpos++;
//            boutcount--;
//            //
//
//        } else if (coin == bc && bcs == 1) {
//
//        }
//
//        if (coin == bd && bds == 0) {
//            coin.move(x, y);
//            //s=0;
//            bds = 1;
//            bdpos++;
//            boutcount--;
//            //
//
//        } else if (coin == bd && bds == 1) {
//        }
//
//    }
//
//    public void move(JButton coin, int x, int y) {
//      
//            playerchance--;
//        
//        int i = 0;
//        while (i <= s - 1) {
//            int X = coin.getLocation().x;
//            int Y = coin.getLocation().y;
//            i++;
//            if (coin == ba) {
//                coin.move(X + icell[bac][0], Y + icell[bac][1]);
//                bac++;
//                bapos++;
//                status = 0;
//
//            }
//            if (coin == bb) {
//                coin.move(X + icell[bbc][0], Y + icell[bbc][1]);
//                bbc++;
//                bbpos++;
//                status = 0;
//
//            }
//            if (coin == bc) {
//                coin.move(X + icell[bcc][0], Y + icell[bcc][1]);
//                bcc++;
//                bcpos++;
//                status = 0;
//
//            }
//            if (coin == bd) {
//                coin.move(X + icell[bdc][0], Y + icell[bdc][1]);
//                bdc++;
//                bdpos++;
//                status = 0;
//
//                //
//            }
//        }
//
//    }
//
//    public void rmove(JButton coin, int x, int y) {
//        if (player == 2) {
//
//            if (routcount > 0) {
//                if (insertchance > 0) {
//                    Rinsert(coin, x, y);
//                    //switchplayer(playerchance, player);
//
//                }
//            } else if (movechance > 0) {
//                if (ras == 1 && coin == ra) {
//                    if (25 - rapos >= s) {
//                        Rmove(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//
//                        //switchplayer(playerchance, player);
//                    }
//                } else if (rbs == 1 && coin == rb) {
//                    if (25 - rbpos >= s) {
//                        Rmove(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//                        //switchplayer(playerchance, player);
//
//                    }
//                } else if (rcs == 1 && coin == rc) {
//                    if (25 - rcpos >= s) {
//                        Rmove(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//                        //switchplayer(playerchance, player);
//
//                    }
//                } else if (rds == 1 && coin == rd) {
//                    if (25 - rdpos >= s) {
//                        Rmove(coin, x, y);
//                        movechance--;
//                        insertchance--;
//                        playerchance--;
//
//                        //switchplayer(playerchance, player);
//                    }
//                }
//
//            }
//
////            if (bas == 0 || bbs == 0 || bcs == 0 || bds == 0) {
////                if (s == 1 || s == 8 || s == 4) {
////                    
////                }
////
////            } else {
////
////                /*if(s==8){
////                    if(b8==0||b8==1){
////                        player=1;
////                        status=1;
////                        b8++;
////                    }
////                    if(bas==1&&bbs==1&&bcs==1&&bds==1){
////                        player=1;
////                    }*/
////                int i = 0;
////                while (i <= s - 1) {
////                    int X = coin.getLocation().x;
////                    int Y = coin.getLocation().y;
////                    i++;
////                    if (coin == ba) {
////                        coin.move(X + icell[bac][0], Y + icell[bac][1]);
////                        bac++;
////                        status = 0;
////
////                    }
////                    if (coin == bb) {
////                        coin.move(X + icell[bbc][0], Y + icell[bbc][1]);
////                        bbc++;
////                        status = 0;
////                    }
////                    if (coin == bc) {
////                        coin.move(X + icell[bcc][0], Y + icell[bcc][1]);
////                        bcc++;
////                        status = 0;
////                    }
////                    if (coin == bd) {
////                        coin.move(X + icell[bdc][0], Y + icell[bdc][1]);
////                        bdc++;
////                        status = 0;
////                    }
////                }
////
////            }
//        }
//    }
    public void msg(String msg) {
        JOptionPane.showMessageDialog(null, msg);
    }

//    public void Rinsert(JButton coin, int x, int y) {
//
//        if (coin == ra && ras == 0) {
//            coin.move(x, y);
//            //s=0;
//            ras = 1;
//            rapos++;
//            routcount--;
//            insertchance--;
//            movechance--;
//            playerchance--;
//            msg("Player Chance = "+playerchance);
//
//        } else if (coin == ra && ras == 1) {
//
//        }
//
//        if (coin == rb && rbs == 0) {
//            coin.move(x, y);
//            //s=0;
//            rbs = 1;
//            rbpos++;
//            routcount--;
//            insertchance--;
//            movechance--;
//            playerchance--;
//
//        } else if (coin == rb && rbs == 1) {
//
//        }
//
//        if (coin == rc && rcs == 0) {
//            coin.move(x, y);
//            //s=0;
//            rcs = 1;
//            rcpos++;
//            routcount--;
//            insertchance--;
//            movechance--;
//            playerchance--;
//
//        } else if (coin == rc && rcs == 1) {
//
//        }
//
//        if (coin == rd && rds == 0) {
//            coin.move(x, y);
//            //s=0;
//            rds = 1;
//            rdpos++;
//            routcount--;
//            insertchance--;
//            movechance--;
//            playerchance--;
//
//        } else if (coin == rd && rds == 1) {
//        }
//
//    }
//
//    public void Rmove(JButton coin, int x, int y) {
//        if (playerchance > 0) {
//            player = player;
//            playerchance--;
//        }
//        int i = 0;
//        while (i <= s - 1) {
//            int X = coin.getLocation().x;
//            int Y = coin.getLocation().y;
//            i++;
//            if (coin == ra) {
//                coin.move(X + jcell[rac][0], Y + jcell[rac][1]);
//                rac++;
//                rapos++;
//                status = 0;
//
//            }
//            if (coin == rb) {
//                coin.move(X + jcell[rbc][0], Y + jcell[rbc][1]);
//                rbc++;
//                rbpos++;
//                status = 0;
//
//            }
//            if (coin == rc) {
//                coin.move(X + jcell[rcc][0], Y + jcell[rcc][1]);
//                rcc++;
//                rcpos++;
//                status = 0;
//
//            }
//            if (coin == rd) {
//                coin.move(X + jcell[rdc][0], Y + jcell[rdc][1]);
//                rdc++;
//                rdpos++;
//                status = 0;
//
//            }
//        }
//
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ba;
    private javax.swing.JButton bb;
    private javax.swing.JButton bc;
    private javax.swing.JButton bd;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton ra;
    private javax.swing.JButton rb;
    private javax.swing.JButton rc;
    private javax.swing.JButton rd;
    // End of variables declaration//GEN-END:variables

    public int s;
    public int[] ftba = new int[]{380, 500};
    public int[] ftbb = new int[]{380, 580};
    public int[] ftbc = new int[]{410, 500};
    public int[] ftbd = new int[]{410, 580};

    public int[] ftra = new int[]{340, 50};
    public int[] ftrb = new int[]{340, 80};
    public int[] ftrc = new int[]{450, 50};
    public int[] ftrd = new int[]{450, 80};

    public int[][] icell = new int[][]{
        {160, 0},
        {160, 0},
        {0, -120},
        {0, -120},
        {0, -120},
        {0, -120},
        {-160, 0},
        {-160, 0},
        {-160, 0},
        {-160, 0},
        {0, 120},
        {0, 120},
        {0, 120},
        {0, 120},
        {160, 0},
        {0, -120},
        {0, -120},
        {0, -120},
        {160, 0},
        {160, 0},
        {0, 120},
        {0, 120},
        {-160, 0},
        {0, -120}
    };
    public int bax = 380, bay = 500;

    public int bas = 0;
    public int bbs = 0;
    public int bcs = 0;
    public int bds = 0;

    public int bac = 0;
    public int bbc = 0;
    public int bcc = 0;
    public int bdc = 0;

    public int rax = 340, ray = 50;

    public int boutcount = 4;
    public int movechance = 0;
    public int insertchance = 0;
    public int playerchance = 0;

    public int routcount = 4;

    public int ras = 0;
    public int rbs = 0;
    public int rcs = 0;
    public int rds = 0;

    public int rac = 0;
    public int rbc = 0;
    public int rcc = 0;
    public int rdc = 0;
    public int status = 0;
    public int b8 = 1;

    public int bapos = 0;
    public int bbpos = 0;
    public int bcpos = 0;
    public int bdpos = 0;

    public int rapos = 0;
    public int rbpos = 0;
    public int rcpos = 0;
    public int rdpos = 0;

    public int player = 0;

    public int[][] jcell = new int[][]{
        {-160, 0},
        {-160, 0},
        {0, 120},
        {0, 120},
        {0, 120},
        {0, 120},
        {160, 0},
        {160, 0},
        {160, 0},
        {160, 0},
        {0, -120},
        {0, -120},
        {0, -120},
        {0, -120},
        {-160, 0},
        {0, 120},
        {0, 120},
        {0, 120},
        {-160, 0},
        {-160, 0},
        {0, -120},
        {0, -120},
        {160, 0},
        {0, 120}

    };

    public int insert = 0, move = 0;

    private static class Pointer_to_int {

        public Pointer_to_int() {
        }
    }
}
